NAME
    Net::Twitter::Lite - A perl interface to the Twitter API

VERSION
    This document describes Net::Twitter::Lite version 0.01001

SYNOPSIS
      use Net::Twitter::Lite;

      my $nt = Net::Twitter::Lite->new(
          username => $user,
          password => $password
      );

      my $result = eval { $nt->update('Hello, world!') };

      eval {
          my $statuses = $nt->friends_timeline({ since_id => $high_water, count => 100 });
          for my $status ( @$statuses ) {
              print "$status->{time} <$status->{user}{screen_name}> $status->{text}\n";
          }
      };
      warn "$@\n" if $@;

DESCRIPTION
    This module provides a perl interface to the Twitter APIs. It uses the
    same API definitions as Net::Twitter, but without the extra bells and
    whistles and without the additional dependencies. Same great taste, less
    filling.

    This module is related to, but is not part of the "Net::Twitter"
    distribution. It's API methods and API method documentation are
    generated from "Net::Twitter"'s internals. It exists for those who
    cannot, or prefer not to install Moose and its dependencies.

    You should consider upgrading to "Net::Twitter" for additional
    functionality, finer grained control over features, full backwards
    compatibility with older versions of "Net::Twitter", and additional
    error handling options.

MIGRATING FROM NET::TWITTER 2.x
    If you are migrating from Net::Twitter 2.12 (or an earlier version), you
    may need to make some minor changes to your application code in order to
    user Net::Twitter::Lite successfully.

    The primary difference is in error handling. Net::Twitter::Lite throws
    exceptions on error. It does not support the "get_error", "http_code",
    and "http_message" methods used in Net::Twitter 2.12 and prior versions.

    Instead of

      # DON'T!
      my $friends = $nt->friends();
      if ( $friends ) {
          # process $friends
      }

    wrap the API call in an eval block:

      # DO!
      my $friends = eval { $nt->friends() };
      if ( $friends ) {
          # process $friends
      }

    Here's a much more complex example taken from application code using
    Net::Twitter 2.12:

      # DON'T!
      my $friends = $nt->friends();
      if ( $friends ) {
          # process $friends
      }
      else {
          my $error = $nt->get_error;
          if ( ref $error ) {
              if ( ref($error) eq 'HASH' && exists $error->{error} ) {
                      $error = $error->{error};
              }
              else {
                      $error = 'Unexpected error type ' . ref($error);
              }
          }
          else {
              $error = $nt->http_code() . ": " . $nt->http_message;
          }
          warn "$error\n";
      }

    The Net::Twitter::Lite equivalent is:

      # DO!
      eval {
          my $friends = $nt->friends();
          # process $friends
      };
      warn "$@\n" if $@;
      return;

    In Net::Twitter::Lite, an error can always be treated as a string. See
    Net::Twitter::Lite::Error. The HTTP Status Code and HTTP Message are
    both available. Rather than accessing them via the Net::Twitter::Lite
    instance, you access them via the Net::Twitter::Lite::Error instance
    thrown as an error.

    For example:

      # DO!
      eval {
         my $friends = $nt->friends();
         # process $friends
      };
      if ( my $error = $@ ) {
          if ( blessed $error && $error->isa("Net::Twitter::Lite::Error)
               && $error->code() == 502 ) {
              $error = "Fail Whale!";
          }
          warn "$error\n";
      }

  Unsupported Net::Twitter 2.12 options to "new"
    Net::Twitter::Lite does not support the following Net::Twitter 2.12
    options to "new". It silently ignores them:

    no_fallback
        If Net::Twitter::Lite is unable to create an instance of the class
        specified in the "useragent_class" option to "new", it dies, rather
        than falling back to an LWP::UserAgent object. You really don't want
        a failure to create the "useragent_class" you specified to go
        unnoticed.

    twittervision
        Net::Twitter::Lite does not support the TwitterVision API. Use
        Net::Twitter, instead, if you need it.

    skip_arg_validation
        Net::Twitter::Lite does not API parameter validation. This is a
        feature. If Twitter adds a new option to an API method, you can use
        it immediately by passing it in the HASH ref to the API call.

        Net::Twitter::Lite relies on Twitter to validate its own parameters.
        An appropriate exception will be thrown if Twitter reports a
        parameter error.

    die_on_validation
        See "skip_arg_validation". If Twitter returns an bad parameter
        error, an appropriate exception will be thrown.

    arrayref_on_error
        This option allowed the following idiom in Net::Twitter 2.12:

          # DON'T!
          for my $friend ( @{ $nt->friends() } ) {
             # process $friend
          }

        The equivalent Net::Twitter::Lite code is:

          # DO!
          eval {
              for my $friend ( @{ $nt->friends() } ) {
                  # process $friend
              }
          };

  Unsupported Net::Twitter 2.12 methods
    clone
        The "clone" method was added to Net::Twitter 2.x to allow safe error
        handling in an environment where concurrent requests are handled,
        for example, when using LWP::UserAgent::POE as the
        "useragent_class". Since Net::Twitter::Lite throws exceptions
        instead of stashing them in the Net::Twitter::Lite instance, it is
        safe in a current request environment, obviating the need for
        "clone".

    get_error
    http_code
    http_message
        These methods are replaced by Net::Twitter::Lite::Error. An instance
        of that class is thrown errors are encountered.

METHODS AND ARGUMENTS
    new This constructs a "Net::Twitter::Lite" object. It takes several
        named parameters, all of them optional:

        username
            This is the screen name or email used to authenticate with
            Twitter.

        password
            This is the password used to authenticate with Twitter.

        clientname
            The value for the "X-Twitter-Client-Name" HTTP header. It
            defaults to "Perl Net::Twitter::Lite".

        clientver
            The value for the "X-Twitter-Client-Version" HTTP header. It
            defaults to current version of the "Net::Twitter::Lite" module.

        clienturl
            The value for the "X-Twitter-Client-URL" HTTP header. It
            defaults to the search.cpan.org page for the
            "Net::Twitter::Lite" distribution.

        useragent_class
            The "LWP::UserAgent" compatible class used internally by
            "Net::Twitter::Lite". It defaults to "LWP::UserAgent". For POE
            based applications, consider using "LWP::UserAgent::POE".

        useragent_args
            An HASH ref of arguments to pass to constructor of the class
            specified with "useragent_class", above. It defaults to {} (an
            empty HASH ref).

        useragent
            The value for "User-Agent" HTTP header. It defaults to
            "Net::Twitter::Lite/0.01001 (Perl)".

        source
            The value used in the "source" parameter of API method calls. It
            is currently only used in the "update" method in the REST API.
            It defaults to "twitterpm". This results in the text "from
            Net::Twitter" rather than "from web" for status messages posted
            from "Net::Twitter::Lite" when displayed via the Twitter web
            interface. The value for this parameter is provided by Twitter
            when a Twitter application is registered. See
            <http://apiwiki.twitter.com/FAQ#HowdoIget%E2%80%9CfromMyApp%E2%8
            0%9DappendedtoupdatessentfrommyAPIapplication>.

        apiurl
            The URL for the Twitter API. This defaults to
            "http://twitter.com".

        identica
            If set to 1 (or any value that evaluates to true), apiurl
            defaults to "http://identi.ca/api".

    credentials($username, $password)
        Set the credentials for Basic Authentication. This is helpful for
        managing multiple accounts.

API METHODS AND ARGUMENTS
    Most Twitter API methods take parameters. All Net::Twitter::Lite API
    methods will accept a HASH ref of named parameters as specified in the
    Twitter API documentation. For convenience, many Net::Twitter::Lite
    methods accept simple positional arguments as documented, below. The
    positional parameter passing style is optional; you can always use the
    named parameters in a hash ref if you prefer.

    For example, the REST API method "update" has one required parameter,
    "status". You can call "update" with a HASH ref argument:

        $nt->update({ status => 'Hello world!' });

    Or, you can use the convenient form:

        $nt->update('Hello world!');

    The "update" method also has an optional parameter,
    "in_reply_to_status_id". To use it, you must use the HASH ref form:

        $nt->update({ status => 'Hello world!', in_reply_to_status_id => $reply_to });

    Convenience form is provided for the required parameters of all API
    methods. So, these two calls are equivalent:

        $nt->friendship_exists({ user_a => $fred, user_b => $barney });
        $nt->friendship_exists($fred, $barney);

    Many API methods have aliases. You can use the API method name, or any
    of its aliases, as you prefer. For example, these calls are all
    equivalent:

        $nt->friendship_exists($fred, $barney);
        $nt->relationship_exists($fred, $barney);
        $nt->follows($fred, $barney);

    Aliases support both the HASH ref and convenient forms:

        $nt->follows({ user_a => $fred, user_b => $barney });

    Methods that support the "page" parameter expect page numbers > 0.
    Twitter silently ignores invalid "page" values. So "{ page => 0 }"
    produces the same result as "{ page => 1 }".

REST API Methods
    Several of these methods accept a user ID as the "id" parameter. The
    user ID can be either a screen name, or the users numeric ID. To
    disambiguate, use the "screen_name" or "user_id" parameters, instead.

    For example, These calls are equivalent:

        $nt->create_friend('net_twitter'); # screen name
        $nt->create_friend(1564061);       # numeric ID
        $nt->create_friend({ id => 'net_twitter' });
        $nt->create_friend({ screen_name => 'net_twitter' });
        $nt->create_friend({ user_id     => 1564061 });

    However user_id 911 and screen_name 911 are separate Twitter accounts.
    These calls are NOT equivalent:

        $nt->create_friend(911); # interpreted as screen name
        $nt->create_friend({ user_id => 911 }); # screen name: richellis

    Whenever the "id" parameter is required and "user_id" and "screen_name"
    are also parameters, using any one of them satisfies the requirement.

    block_exists
    block_exists(id)

        Parameters: id, user_id, screen_name
        Required: id

        Returns if the authenticating user is blocking a target user. Will
        return the blocked user's object if a block exists, and error with
        HTTP 404 response code otherwise.

        Returns: BasicUser

    blocking
    blocking(page)

        Parameters: page
        Required: *none*

        Returns an array of user objects that the authenticating user is
        blocking.

        Returns: ArrayRef[BasicUser]

    blocking_ids

        Parameters: *none*
        Required: *none*

        Returns an array of numeric user ids the authenticating user is
        blocking.

        Returns: ArrayRef[Int]

    create_block
    create_block(id)

        Parameters: id
        Required: id

        Blocks the user specified in the ID parameter as the authenticating
        user. Returns the blocked user when successful. You can find out
        more about blocking in the Twitter Support Knowledge Base.

        Returns: BasicUser

    create_favorite
    create_favorite(id)

        Parameters: id
        Required: id

        Favorites the status specified in the ID parameter as the
        authenticating user. Returns the favorite status when successful.

        Returns: Status

    create_friend
    create_friend(id)
    alias: follow_new

        Parameters: id, user_id, screen_name, follow
        Required: id

        Befriends the user specified in the ID parameter as the
        authenticating user. Returns the befriended user when successful.
        Returns a string describing the failure condition when unsuccessful.

        Returns: BasicUser

    destroy_block
    destroy_block(id)

        Parameters: id
        Required: id

        Un-blocks the user specified in the ID parameter as the
        authenticating user. Returns the un-blocked user when successful.

        Returns: BasicUser

    destroy_direct_message
    destroy_direct_message(id)

        Parameters: id
        Required: id

        Destroys the direct message specified in the required ID parameter.
        The authenticating user must be the recipient of the specified
        direct message.

        Returns: DirectMessage

    destroy_favorite
    destroy_favorite(id)

        Parameters: id
        Required: id

        Un-favorites the status specified in the ID parameter as the
        authenticating user. Returns the un-favorited status.

        Returns: Status

    destroy_friend
    destroy_friend(id)
    alias: unfollow

        Parameters: id, user_id, screen_name
        Required: id

        Discontinues friendship with the user specified in the ID parameter
        as the authenticating user. Returns the un-friended user when
        successful. Returns a string describing the failure condition when
        unsuccessful.

        Returns: BasicUser

    destroy_status
    destroy_status(id)

        Parameters: id
        Required: id

        Destroys the status specified by the required ID parameter. The
        authenticating user must be the author of the specified status.

        Returns: Status

    direct_messages

        Parameters: since_id, max_id, count, page
        Required: *none*

        Returns a list of the 20 most recent direct messages sent to the
        authenticating user including detailed information about the sending
        and recipient users.

        Returns: ArrayRef[DirectMessage]

    disable_notifications
    disable_notifications(id)

        Parameters: id
        Required: id

        Disables notifications for updates from the specified user to the
        authenticating user. Returns the specified user when successful.

        Returns: BasicUser

    enable_notifications
    enable_notifications(id)

        Parameters: id
        Required: id

        Enables notifications for updates from the specified user to the
        authenticating user. Returns the specified user when successful.

        Returns: BasicUser

    end_session

        Parameters: *none*
        Required: *none*

        Ends the session of the authenticating user, returning a null
        cookie. Use this method to sign users out of client-facing
        applications like widgets.

        Returns: Error

    favorites

        Parameters: id, page
        Required: *none*

        Returns the 20 most recent favorite statuses for the authenticating
        user or user specified by the ID parameter.

        Returns: ArrayRef[Status]

    followers

        Parameters: id, user_id, screen_name, page
        Required: *none*

        Returns the authenticating user's followers, each with current
        status inline. They are ordered by the order in which they joined
        Twitter (this is going to be changed).

        Returns 100 followers per page.

        Returns: ArrayRef[BasicUser]

    followers_ids
    followers_ids(id)

        Parameters: id, user_id, screen_name, page
        Required: id

        Returns an array of numeric IDs for every user is followed by.

        Returns: ArrayRef[Int]

    friends
    alias: following

        Parameters: id, user_id, screen_name, page
        Required: *none*

        Returns the authenticating user's friends, each with current status
        inline. They are ordered by the order in which they were added as
        friends. It's also possible to request another user's recent friends
        list via the id parameter.

        Returns 100 friends per page.

        Returns: ArrayRef[BasicUser]

    friends_ids
    friends_ids(id)
    alias: following_ids

        Parameters: id, user_id, screen_name, page
        Required: id

        Returns an array of numeric IDs for every user the specified user is
        following.

        Currently, Twitter returns IDs ordered from most recently followed
        to least recently followed. This order may change at any time.

        Returns: ArrayRef[Int]

    friends_timeline
    alias: following_timeline

        Parameters: since_id, max_id, count, page
        Required: *none*

        Returns the 20 most recent statuses posted by the authenticating
        user and that user's friends. This is the equivalent of /home on the
        Web.

        Returns: ArrayRef[Status]

    friendship_exists
    friendship_exists(user_a, user_b)
    alias: relationship_exists
    alias: follows

        Parameters: user_a, user_b
        Required: user_a, user_b

        Tests for the existence of friendship between two users. Will return
        true if user_a follows user_b, otherwise will return false.

        Returns: Bool

    mentions
    alias: replies

        Parameters: since_id, max_id, count, page
        Required: *none*

        Returns the 20 most recent mentions (statuses containing @username)
        for the authenticating user.

        Returns: ArrayRef[Status]

    new_direct_message
    new_direct_message(user, text)

        Parameters: user, text
        Required: user, text

        Sends a new direct message to the specified user from the
        authenticating user. Requires both the user and text parameters.
        Returns the sent message when successful.

        Returns: DirectMessage

    public_timeline

        Parameters: *none*
        Required: *none*

        Returns the 20 most recent statuses from non-protected users who
        have set a custom user icon. Does not require authentication. Note
        that the public timeline is cached for 60 seconds so requesting it
        more often than that is a waste of resources.

        Returns: ArrayRef[Status]

    rate_limit_status

        Parameters: *none*
        Required: *none*

        Returns the remaining number of API requests available to the
        requesting user before the API limit is reached for the current
        hour. Calls to rate_limit_status do not count against the rate
        limit. If authentication credentials are provided, the rate limit
        status for the authenticating user is returned. Otherwise, the rate
        limit status for the requester's IP address is returned.

        Returns: RateLimitStatus

    sent_direct_messages

        Parameters: since_id, max_id, page
        Required: *none*

        Returns a list of the 20 most recent direct messages sent by the
        authenticating user including detailed information about the sending
        and recipient users.

        Returns: ArrayRef[DirectMessage]

    show_status
    show_status(id)

        Parameters: id
        Required: id

        Returns a single status, specified by the id parameter. The status's
        author will be returned inline.

        Returns: Status

    show_user
    show_user(id)

        Parameters: id
        Required: id

        Returns extended information of a given user, specified by ID or
        screen name as per the required id parameter. This information
        includes design settings, so third party developers can theme their
        widgets according to a given user's preferences. You must be
        properly authenticated to request the page of a protected user.

        Returns: ExtendedUser

    test

        Parameters: *none*
        Required: *none*

        Returns the string "ok" status code.

        Returns: Str

    update
    update(status)

        Parameters: status, in_reply_to_status_id
        Required: status

        Updates the authenticating user's status. Requires the status
        parameter specified. A status update with text identical to the
        authenticating user's current status will be ignored.

        Returns: Status

    update_delivery_device
    update_delivery_device(device)

        Parameters: device
        Required: device

        Sets which device Twitter delivers updates to for the authenticating
        user. Sending none as the device parameter will disable IM or SMS
        updates.

        Returns: BasicUser

    update_profile

        Parameters: name, email, url, location, description
        Required: *none*

        Sets values that users are able to set under the "Account" tab of
        their settings page. Only the parameters specified will be updated;
        to only update the "name" attribute, for example, only include that
        parameter in your request.

        Returns: ExtendedUser

    update_profile_background_image
    update_profile_background_image(image)

        Parameters: image
        Required: image

        Updates the authenticating user's profile background image. Expects
        raw multipart data, not a URL to an image.

        Returns: ExtendedUser

    update_profile_colors

        Parameters: profile_background_color, profile_text_color,
        profile_link_color, profile_sidebar_fill_color,
        profile_sidebar_border_color
        Required: *none*

        Sets one or more hex values that control the color scheme of the
        authenticating user's profile page on twitter.com. These values are
        also returned in the /users/show API method.

        Returns: ExtendedUser

    update_profile_image
    update_profile_image(image)

        Parameters: image
        Required: image

        Updates the authenticating user's profile image. Expects raw
        multipart data, not a URL to an image.

        Returns: ExtendedUser

    user_timeline

        Parameters: id, user_id, screen_name, since_id, max_id, count, page
        Required: *none*

        Returns the 20 most recent statuses posted from the authenticating
        user. It's also possible to request another user's timeline via the
        id parameter. This is the equivalent of the Web /archive page for
        your own user, or the profile page for a third party.

        Returns: ArrayRef[Status]

    verify_credentials

        Parameters: *none*
        Required: *none*

        Returns an HTTP 200 OK response code and a representation of the
        requesting user if authentication was successful; returns a 401
        status code and an error message if not. Use this method to test if
        supplied user credentials are valid.

        Returns: ExtendedUser

Search API Methods
    search
    search(q)

        Parameters: q, callback, lang, rpp, page, since_id, geocode,
        show_user
        Required: q

        Returns tweets that match a specified query. You can use a variety
        of search operators in your query.

        Returns: ArrayRef[Status]

    trends

        Parameters: *none*
        Required: *none*

        Returns the top ten queries that are currently trending on Twitter.
        The response includes the time of the request, the name of each
        trending topic, and the url to the Twitter Search results page for
        that topic.

        Returns: ArrayRef[Query]

    trends_current
    trends_current(exclude)

        Parameters: exclude
        Required: *none*

        Returns the current top ten trending topics on Twitter. The response
        includes the time of the request, the name of each trending topic,
        and query used on Twitter Search results page for that topic.

        Returns: HashRef

    trends_daily

        Parameters: date, exclude
        Required: *none*

        Returns the top 20 trending topics for each hour in a given day.

        Returns: HashRef

    trends_weekly

        Parameters: date, exclude
        Required: *none*

        Returns the top 30 trending topics for each day in a given week.

        Returns: HashRef

ERROR HANDLING
    When "Net::Twitter::Lite" encounters a Twitter API error or a network
    error, it throws a "Net::Twitter::Lite::Error" object. You can catch and
    process these exceptions by using "eval" blocks and testing $@:

        eval {
            my $statuses = $nt->friends_timeline(); # this might die!

            for my $status ( @$statuses ) {
                #...
            }
        };
        if ( $@ ) {
            # friends_timeline encountered an error

            if ( blessed $@ && $@->isa('Net::Twitter::Lite::Error' ) {
                #... use the thrown error obj
                warn $@->error;
            }
            else {
                # something bad happened!
                die $@;
            }
        }

    "Net::Twitter::Lite::Error" stringifies to something reasonable, so if
    you don't need detailed error information, you can simply treat $@ as a
    string:

        eval { $nt->update($status) };
        if ( $@ ) {
            warn "update failed because: $@\n";
        }

SEE ALSO
    Net::Twitter::Lite::Error
        The "Net::Twitter::Lite" exception object.

    <http://apiwiki.twitter.com/Twitter-API-Documentation>
        This is the official Twitter API documentation. It describes the
        methods and their parameters in more detail and may be more current
        than the documentation provided with this module.

    LWP::UserAgent::POE
        This LWP::UserAgent compatible class can be used in POE based
        application along with Net::Twitter::Lite to provide concurrent,
        non-blocking requests.

SUPPORT
    Please report bugs to "bug-net-twitter@rt.cpan.org", or through the web
    interface at <https://rt.cpan.org/Dist/Display.html?Queue=Net-Twitter>.

    Join the Net::Twitter IRC channel at <irc://irc.perl.org/net-twitter>.

    Follow net_twitter: <http://twitter.com/net_twitter>.

    Track Net::Twitter::Lite development at
    <http://github.com/semifor/net-twitter-lite>.

AUTHOR
    Marc Mims <marc@questright.com>

LICENSE
    Copyright (c) 2009 Marc Mims

    The Twitter API itself, and the description text used in this module is:

    Copyright (c) 2009 Twitter

    This library is free software; you can redistribute it and/or modify it
    under the same terms as Perl itself.

