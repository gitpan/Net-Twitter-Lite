NAME
    Net::Twitter::Lite::WithAPIv1_1 - A perl interface to the Twitter API

VERSION
    version 0.12000

SYNOPSIS
      use Net::Twitter::Lite::WithAPIv1_1;
      use Scalar::Util 'blessed';

      my $nt = Net::Twitter::Lite::WithAPIv1_1->new(
          consumer_key        => $consumer_key,
          consumer_secret     => $consumer_secret,
          access_token        => $token,
          access_token_secret => $token_secret,
      );

      my $result = $nt->update('Hello, world!');

      eval {
          my $statuses = $nt->home_timeline({ since_id => $high_water, count => 100 });
          for my $status ( @$statuses ) {
              print "$status->{created_at} <$status->{user}{screen_name}> $status->{text}\n";
          }
      };
      if ( my $err = $@ ) {
          die $@ unless blessed $err && $err->isa('Net::Twitter::Lite::Error');

          warn "HTTP Response Code: ", $err->code, "\n",
               "HTTP Message......: ", $err->message, "\n",
               "Twitter error.....: ", $err->error, "\n";
      }

DESCRIPTION
    This module provides a perl interface to the Twitter APIs. See
    <http://dev.twitter.com/docs/api/1.1> for a full description of the
    Twitter APIs.

RETURN VALUES
    Net::Twitter::Lite decodes the data structures returned by the Twitter
    API into native perl data structures (HASH references and ARRAY
    references). The full layout of those data structures are not
    documented, here. They change often, usually with the addition of new
    elements, and documenting all of those changes would be a significant
    challenge.

    Instead, rely on the online Twitter API documentation and inspection of
    the returned data.

    The Twitter API online documentation is located at
    <http://dev.twitter.com/docs/1.1>.

    To inspect the data, use Data::Dumper or similar module of your choice.
    Here's a simple example using Data::Dumper:

        use Data::Dumper;

        my $r = $nt->search($search_term);
        print Dumper $r;

    For more information on perl data structures, see perlreftut, perldsc,
    and perllol.

METHODS AND ARGUMENTS
    new This constructs a "Net::Twitter::Lite::WithAPIv1_1" object. It takes
        several named parameters, all of them optional:

        clientname
            The value for the "X-Twitter-Client-Name" HTTP header. It
            defaults to "Perl Net::Twitter::Lite::WithAPIv1_1". Note: This
            option has nothing to do with the "via" application byline.

        clientver
            The value for the "X-Twitter-Client-Version" HTTP header. It
            defaults to current version of this module.

        clienturl
            The value for the "X-Twitter-Client-URL" HTTP header. It
            defaults to the search.cpan.org page for the
            "Net::Twitter::Lite" distribution.

        useragent_class
            The "LWP::UserAgent" compatible class used internally to make
            HTTP requests. It defaults to "LWP::UserAgent". For POE based
            applications, consider using "LWP::UserAgent::POE".

        useragent_args
            An HASH ref of arguments to pass to constructor of the class
            specified with "useragent_class", above. It defaults to {} (an
            empty HASH ref).

        useragent
            The value for "User-Agent" HTTP header. It defaults to
            "Net::Twitter::Lite::WithAPIv1_1/$VERSION (Perl)", where
            $VERSION is the current version of this module.

        source
            Twitter on longer uses the "source" parameter. Support for it
            remains in this module for any compatible services that may use
            it. It was originally used by Twitter to provide an "via"
            application byline.

        apiurl
            The URL for the Twitter API. This defaults to
            "http://api.twitter.com/1". This option is available when the
            "API::RESTv1_1" trait is included.

        apirealm
            A string containing the Twitter API realm used for Basic
            Authentication. It defaults to "Twitter API". This option is
            available when the "API::RESTv1_1" trait is included.

        identica
            If set to 1, "Net::Twitter::Lite::WithAPIv1_1" overrides the
            defaults for "apiurl", "apihost", and "apirealm" to
            "http://identi.ca/api", "identi.ca:80", and "Laconica API"
            respectively. It defaults to 0.

        consumer_key
            A string containing the OAuth consumer key provided by Twitter
            when an application is registered. This option is available when
            the "OAuth" trait is included.

        consumer_secret
            A string containing the OAuth consumer secret. This option is
            available when the "OAuth" trait is included.

        ssl If set to 1, an SSL connection will be used for all API calls.
            Defaults to 0.

        netrc
            (Optional) Sets the *machine* key to look up in ".netrc" to
            obtain credentials. If set to 1, will use the value of the
            "netrc_machine" option (below).

               # in .netrc
               machine api.twitter.com
                 login YOUR_TWITTER_USER_NAME
                 password YOUR_TWITTER_PASSWORD
               machine semifor.twitter.com
                 login semifor
                 password SUPERSECRET

               # in your perl program
               $nt = Net::Twitter::Lite::WithAPIv1_1->new(netrc => 1);
               $nt = Net::Twitter::Lite::WithAPIv1_1->new(netrc => 'semifor.twitter.com');

        netrc_machine
            (Optional) Sets the "machine" entry to look up in ".netrc" when
            "<netrc =" 1>> is used. Defaults to "api.twitter.com".

    credentials($username, $password)
        Set the credentials for Basic Authentication. This is helpful for
        managing multiple accounts.

AUTHENTICATION
    With Twitter API version 1.1, all API calls require OAuth. Other Twitter
    compatible services, like Identi.ca, accept Basic Authentication. So,
    this module provides support for both.

    For OAuth authentication, provide "consumer_key" and "consumer_secret"
    arguments to "new". Set "access_token" and "access_token_secret" for
    each call, or provide them as arguments to "new".

    For Basic Authentication, provide the "username" and "password" options
    to "new" or call the "credentials" method.

    In addition to the arguments specified for each API method described
    below, an additional "authenticate" parameter can be passed. To request
    an "Authorization" header, pass "authenticate => 1"; to suppress an
    authentication header, pass "authenticate => 0". Even if requested, an
    Authorization header will not be added if there are no user credentials
    (username and password for Basic Authentication; access tokens for
    OAuth).

    This is probably only useful for non-Twitter sites that use the Twitter
    API and support unauthenticated calls.

API METHODS AND ARGUMENTS
    Most Twitter API methods take parameters. All API methods will accept a
    HASH ref of named parameters as specified in the Twitter API
    documentation. For convenience, many methods accept simple positional
    arguments. The positional parameter passing style is optional; you can
    always use the named parameters in a HASH reference if you prefer.

    You may pass any number of required parameters as positional parameters.
    You must pass them in the order specified in the documentation for each
    method. Optional parameters must be passed as named parameters in a HASH
    reference. The HASH reference containing the named parameters must be
    the final parameter to the method call. Any required parameters not
    passed as positional parameters, must be included in the named parameter
    HASH reference.

    For example, the REST API method "update" has one required parameter,
    "status". You can call "update" with a HASH ref argument:

        $nt->update({ status => 'Hello world!' });

    Or, you can use the convenient, positional parameter form:

        $nt->update('Hello world!');

    The "update" method also has an optional parameter,
    "in_reply_to_status_id". To use it, you must use the HASH ref form:

        $nt->update({ status => 'Hello world!', in_reply_to_status_id => $reply_to });

    You may use the convenient positional form for the required "status"
    parameter with the optional parameters specified in the named parameter
    HASH reference:

        $nt->update('Hello world!', { in_reply_to_status_id => $reply_to });

    Convenience form is provided for the required parameters of all API
    methods. So, these two calls are equivalent:

        $nt->friendship_exists({ user_a => $fred, user_b => $barney });
        $nt->friendship_exists($fred, $barney);

    Many API methods have aliases. You can use the API method name, or any
    of its aliases, as you prefer. For example, these calls are all
    equivalent:

        $nt->friendship_exists($fred, $barney);
        $nt->relationship_exists($fred, $barney);
        $nt->follows($fred, $barney);

    Aliases support both the HASH ref and convenient forms:

        $nt->follows({ user_a => $fred, user_b => $barney });

  Synthetic Arguments
    In addition to the arguments described in the Twitter API Documentation
    for each API method, these additional *synthetic* arguments are
    supported.

    authenticate
        When set to 1, an Authorization header for the API call will be
        provided; when set to 0, it will suppress the Authentication header.
        This argument overrides the defined authentication behavior for the
        API method. It is probably only useful for the "rate_limit_satus"
        method which returns different values for authenticated and
        unauthenticated calls. See "AUTHENTICATION" for more details.

API Methods
    account_settings

        Parameters: *none*
        Required: *none*

        Returns the current trend, geo and sleep time information for the
        authenticating user.

        Returns: HashRef

    add_list_member

        Parameters: list_id, slug, user_id, screen_name, owner_screen_name,
        owner_id
        Required: *none*

        Add a member to a list. The authenticated user must own the list to
        be able to add members to it. Note that lists can't have more than
        500 members.

        Returns: User

    add_place
    add_place(name, contained_within, token, lat, long)

        Parameters: name, contained_within, token, lat, long,
        attribute:street_address, callback
        Required: name, contained_within, token, lat, long

        Creates a new place object at the given latitude and longitude.

        Before creating a place you need to query "similar_places" with the
        latitude, longitude and name of the place you wish to create. The
        query will return an array of places which are similar to the one
        you wish to create, and a token. If the place you wish to create
        isn't in the returned array you can use the token with this method
        to create a new one.

        Returns: Place

    blocking
    alias: blocks_list

        Parameters: cursor, include_entities, skip_status
        Required: *none*

        Returns an array of user objects that the authenticating user is
        blocking.

        Returns: ArrayRef[BasicUser]

    blocking_ids
    alias: blocks_ids

        Parameters: cursor, stringify_ids
        Required: *none*

        Returns an array of numeric user ids the authenticating user is
        blocking.

        Returns: ArrayRef[Int]

    contributees

        Parameters: user_id, screen_name, include_entities, skip_satus
        Required: *none*

        Returns an array of users that the specified user can contribute to.

        Returns: ArrayRef[User]

    contributors

        Parameters: user_id, screen_name, include_entities, skip_satus
        Required: *none*

        Returns an array of users who can contribute to the specified
        account.

        Returns: ArrayRef[User]

    create_block
    create_block(id)

        Parameters: user_id, screen_name, include_entities, skip_status
        Required: id

        Blocks the user specified in the "user_id" or "screen_name"
        parameter as the authenticating user. Returns the blocked user when
        successful. You can find out more about blocking in the Twitter
        Support Knowledge Base.

        Returns: BasicUser

    create_favorite
    create_favorite(id)

        Parameters: id, include_entities
        Required: id

        Favorites the status specified in the ID parameter as the
        authenticating user. Returns the favorite status when successful.

        Returns: Status

    create_friend
    alias: follow
    alias: follow_new
    alias: create_friendship

        Parameters: user_id, screen_name, follow
        Required: *none*

        Follows the user specified in the "user_id" or "screen_name"
        parameter as the authenticating user. Returns the befriended user
        when successful. Returns a string describing the failure condition
        when unsuccessful.

        Returns: BasicUser

    create_list
    create_list(name)

        Parameters: list_id, slug, name, mode, description,
        owner_screen_name, owner_id
        Required: name

        Creates a new list for the authenticated user. Note that you can't
        create more than 20 lists per account.

        Returns: List

    create_saved_search
    create_saved_search(query)

        Parameters: query
        Required: query

        Creates a saved search for the authenticated user.

        Returns: SavedSearch

    delete_list

        Parameters: owner_screen_name, owner_id, list_id, slug
        Required: *none*

        Deletes the specified list. The authenticated user must own the list
        to be able to destroy it.

        Returns: List

    delete_list_member
    alias: remove_list_member

        Parameters: list_id, slug, user_id, screen_name, owner_screen_name,
        owner_id
        Required: *none*

        Removes the specified member from the list. The authenticated user
        must be the list's owner to remove members from the list.

        Returns: User

    destroy_block
    destroy_block(id)

        Parameters: user_id, screen_name, include_entities, skip_status
        Required: id

        Un-blocks the user specified in the "user_id" or "screen_name"
        parameter as the authenticating user. Returns the un-blocked user
        when successful.

        Returns: BasicUser

    destroy_direct_message
    destroy_direct_message(id)

        Parameters: id, include_entities
        Required: id

        Destroys the direct message specified in the required ID parameter.
        The authenticating user must be the recipient of the specified
        direct message.

        Important: this method requires an access token with RWD (read,
        write, and direct message) permissions.

        Returns: DirectMessage

    destroy_favorite
    destroy_favorite(id)

        Parameters: id, include_entities
        Required: id

        Un-favorites the status specified in the ID parameter as the
        authenticating user. Returns the un-favorited status.

        Returns: Status

    destroy_friend
    destroy_friend(id)
    alias: unfollow
    alias: destroy_friendship

        Parameters: user_id, screen_name
        Required: id

        Discontinues friendship with the user specified in the "user_id" or
        "screen_name" parameter as the authenticating user. Returns the
        un-friended user when successful. Returns a string describing the
        failure condition when unsuccessful.

        Returns: BasicUser

    destroy_saved_search
    destroy_saved_search(id)
    alias: delete_saved_search

        Parameters: id
        Required: id

        Destroys a saved search. The search, specified by "id", must be
        owned by the authenticating user.

        Returns: SavedSearch

    destroy_status
    destroy_status(id)

        Parameters: id, trim_user
        Required: id

        Destroys the status specified by the required ID parameter. The
        authenticating user must be the author of the specified status.

        Returns: Status

    direct_messages

        Parameters: since_id, max_id, count, page, include_entities,
        skip_status
        Required: *none*

        Returns a list of the 20 most recent direct messages sent to the
        authenticating user including detailed information about the sending
        and recipient users.

        Important: this method requires an access token with RWD (read,
        write, and direct message) permissions.

        Returns: ArrayRef[DirectMessage]

    favorites

        Parameters: user_id, screen_name, count, since_id, max_id,
        include_entities
        Required: *none*

        Returns the 20 most recent favorite statuses for the authenticating
        user or user specified by the ID parameter.

        Returns: ArrayRef[Status]

    followers
    alias: followers_list

        Parameters: user_id, screen_name, cursor
        Required: *none*

        Returns a cursored collection of user objects for users following
        the specified user.

        Returns: HashRef

    followers_ids

        Parameters: user_id, screen_name, cursor, stringify_ids
        Required: *none*

        Returns a reference to an array of numeric IDs for every user
        following the specified user. The order of the IDs may change from
        call to call. To obtain the screen names, pass the arrayref to
        "lookup_users".

        Use the optional "cursor" parameter to retrieve IDs in pages of
        5000. When the "cursor" parameter is used, the return value is a
        reference to a hash with keys "previous_cursor", "next_cursor", and
        "ids". The value of "ids" is a reference to an array of IDS of the
        user's followers. Set the optional "cursor" parameter to -1 to get
        the first page of IDs. Set it to the prior return's value of
        "previous_cursor" or "next_cursor" to page forward or backwards.
        When there are no prior pages, the value of "previous_cursor" will
        be 0. When there are no subsequent pages, the value of "next_cursor"
        will be 0.

        Returns: HashRef|ArrayRef[Int]

    friends
    alias: friends_list

        Parameters: user_id, screen_name, cursor
        Required: *none*

        Returns a cursored collection of user objects for users followed by
        the specified user.

        Returns: HashRef

    friends_ids
    alias: following_ids

        Parameters: user_id, screen_name, cursor, stringify_ids
        Required: *none*

        Returns a reference to an array of numeric IDs for every user
        followed by the specified user. The order of the IDs is reverse
        chronological.

        Use the optional "cursor" parameter to retrieve IDs in pages of
        5000. When the "cursor" parameter is used, the return value is a
        reference to a hash with keys "previous_cursor", "next_cursor", and
        "ids". The value of "ids" is a reference to an array of IDS of the
        user's friends. Set the optional "cursor" parameter to -1 to get the
        first page of IDs. Set it to the prior return's value of
        "previous_cursor" or "next_cursor" to page forward or backwards.
        When there are no prior pages, the value of "previous_cursor" will
        be 0. When there are no subsequent pages, the value of "next_cursor"
        will be 0.

        Returns: HashRef|ArrayRef[Int]

    friendships_incoming
    alias: incoming_friendships

        Parameters: cursor, stringify_ids
        Required: *none*

        Returns an HASH ref with an array of numeric IDs in the "ids"
        element for every user who has a pending request to follow the
        authenticating user.

        Returns: HashRef

    friendships_outgoing
    alias: outgoing_friendships

        Parameters: cursor, stringify_ids
        Required: *none*

        Returns an HASH ref with an array of numeric IDs in the "ids"
        element for every protected user for whom the authenticating user
        has a pending follow request.

        Returns: HashRef

    geo_id
    geo_id(id)

        Parameters: id
        Required: id

        Returns details of a place returned from the "reverse_geocode"
        method.

        Returns: HashRef

    geo_search

        Parameters: lat, long, query, ip, granularity, accuracy,
        max_results, contained_within, attribute:street_address, callback
        Required: *none*

        Search for places that can be attached to a statuses/update. Given a
        latitude and a longitude pair, an IP address, or a name, this
        request will return a list of all the valid places that can be used
        as the place_id when updating a status.

        Conceptually, a query can be made from the user's location, retrieve
        a list of places, have the user validate the location he or she is
        at, and then send the ID of this location with a call to
        statuses/update.

        This is the recommended method to use find places that can be
        attached to statuses/update. Unlike geo/reverse_geocode which
        provides raw data access, this endpoint can potentially re-order
        places with regards to the user who is authenticated. This approach
        is also preferred for interactive place matching with the user.

        Returns: HashRef

    get_configuration

        Parameters: *none*
        Required: *none*

        Returns the current configuration used by Twitter including
        twitter.com slugs which are not usernames, maximum photo
        resolutions, and t.co URL lengths.

        It is recommended applications request this endpoint when they are
        loaded, but no more than once a day.

        Returns: HashRef

    get_languages

        Parameters: *none*
        Required: *none*

        Returns the list of languages supported by Twitter along with their
        ISO 639-1 code. The ISO 639-1 code is the two letter value to use if
        you include lang with any of your requests.

        Returns: ArrayRef[Lanugage]

    get_list
    alias: show_list

        Parameters: list_id, slug, owner_screen_name, owner_id
        Required: *none*

        Returns the specified list. Private lists will only be shown if the
        authenticated user owns the specified list.

        Returns: List

    get_lists
    alias: list_lists
    alias: all_subscriptions

        Parameters: user_id, screen_name
        Required: *none*

        Returns all lists the authenticating or specified user subscribes
        to, including their own. The user is specified using the "user_id"
        or "screen_name" parameters. If no user is given, the authenticating
        user is used.

        Returns: Hashref

    get_privacy_policy

        Parameters: *none*
        Required: *none*

        Returns Twitter's privacy policy.

        Returns: HashRef

    get_tos

        Parameters: *none*
        Required: *none*

        Returns the Twitter Terms of Service. These are not the same as the
        Developer Rules of the Road.

        Returns: HashRef

    home_timeline

        Parameters: since_id, max_id, count, exclude_replies,
        contributor_details, include_entities, trim_user
        Required: *none*

        Returns the 20 most recent statuses, including retweets, posted by
        the authenticating user and that user's friends.

        Returns: ArrayRef[Status]

    list_members

        Parameters: list_id, slug, owner_screen_name, owner_id, cursor,
        include_entities, skip_status
        Required: *none*

        Returns the members of the specified list. Private list members will
        only be shown if the authenticated user owns the specified list.

        Returns: Hashref

    list_memberships

        Parameters: user_id, screen_name, cursor, filter_to_owned_lists
        Required: *none*

        Returns the lists the specified user has been added to. If user_id
        or screen_name are not provided the memberships for the
        authenticating user are returned.

        Returns: Hashref

    list_statuses

        Parameters: list_id, slug, owner_screen_name, owner_id, since_id,
        max_id, count, include_entities, include_rts
        Required: *none*

        Returns tweet timeline for members of the specified list.
        Historically, retweets were not available in list timeline responses
        but you can now use the include_rts=true parameter to additionally
        receive retweet objects.

        Returns: ArrayRef[Status]

    list_subscribers

        Parameters: list_id, slug, owner_screen_name, owner_id, cursor,
        include_entities, skip_status
        Required: *none*

        Returns the subscribers of the specified list. Private list
        subscribers will only be shown if the authenticated user owns the
        specified list.

        Returns: Hashref

    lookup_friendships

        Parameters: user_id, screen_name
        Required: *none*

        Returns the relationship of the authenticating user to the comma
        separated list or ARRAY ref of up to 100 screen_names or user_ids
        provided. Values for connections can be: following,
        following_requested, followed_by, none. Requires authentication.

        Returns: ArrayRef

    lookup_users

        Parameters: user_id, screen_name, include_entities
        Required: *none*

        Return up to 100 users worth of extended information, specified by
        either ID, screen name, or combination of the two. The author's most
        recent status (if the authenticating user has permission) will be
        returned inline. This method is rate limited to 1000 calls per hour.

        This method will accept user IDs or screen names as either a comma
        delimited string, or as an ARRAY ref. It will also accept arguments
        in the normal HASHREF form or as a simple list of named arguments.
        I.e., any of the following forms are acceptable:

            $nt->lookup_users({ user_id => '1234,6543,3333' });
            $nt->lookup_users(user_id => '1234,6543,3333');
            $nt->lookup_users({ user_id => [ 1234, 6543, 3333 ] });
            $nt->lookup_users({ screen_name => 'fred,barney,wilma' });
            $nt->lookup_users(screen_name => ['fred', 'barney', 'wilma']);

            $nt->lookup_users(
                screen_name => ['fred', 'barney' ],
                user_id     => '4321,6789',
            );

        Returns: ArrayRef[User]

    members_create_all
    alias: add_list_members

        Parameters: list_id, slug, owner_screen_name, owner_id
        Required: *none*

        Adds multiple members to a list, by specifying a reference to an
        array or a comma-separated list of member ids or screen names. The
        authenticated user must own the list to be able to add members to
        it. Note that lists can't have more than 500 members, and you are
        limited to adding up to 100 members to a list at a time with this
        method.

        Returns: List

    members_destroy_all
    alias: remove_list_members

        Parameters: list_id, slug, user_id, screen_name, owner_screen_name,
        owner_id
        Required: *none*

        Removes multiple members from a list, by specifying a reference to
        an array of member ids or screen names, or a string of comma
        separated user ids or screen names. The authenticated user must own
        the list to be able to remove members from it. Note that lists can't
        have more than 500 members, and you are limited to removing up to
        100 members to a list at a time with this method.

        Please note that there can be issues with lists that rapidly remove
        and add memberships. Take care when using these methods such that
        you are not too rapidly switching between removals and adds on the
        same list.

        Returns: List

    mentions
    alias: replies
    alias: mentions_timeline

        Parameters: since_id, max_id, count, trim_user, include_entities,
        contributor_details
        Required: *none*

        Returns the 20 most recent mentions (statuses containing @username)
        for the authenticating user.

        Returns: ArrayRef[Status]

    new_direct_message
    new_direct_message(text)

        Parameters: user_id, screen_name, text
        Required: text

        Sends a new direct message to the specified user from the
        authenticating user. Requires both the user and text parameters.
        Returns the sent message when successful. In order to support
        numeric screen names, the "screen_name" or "user_id" parameters may
        be used instead of "user".

        Important: this method requires an access token with RWD (read,
        write, and direct message) permissions.

        Returns: DirectMessage

    no_retweet_ids

        Parameters: *none*
        Required: *none*

        Returns an ARRAY ref of user IDs for which the authenticating user
        does not want to receive retweets.

        Returns: ArrayRef[UserIDs]

    oembed

        Parameters: id, url, maxwidth, hide_media, hide_thread, omit_script,
        align, related, lang
        Required: *none*

        Returns information allowing the creation of an embedded
        representation of a Tweet on third party sites. See the oEmbed
        <http://oembed.com/> specification for information about the
        response format.

        While this endpoint allows a bit of customization for the final
        appearance of the embedded Tweet, be aware that the appearance of
        the rendered Tweet may change over time to be consistent with
        Twitter's Display Requirements
        <https://dev.twitter.com/terms/display-requirements>. Do not rely on
        any class or id parameters to stay constant in the returned markup.

        Returns: Status

    profile_banner

        Parameters: user_id, screen_name
        Required: *none*

        Returns a hash reference mapping available size variations to URLs
        that can be used to retrieve each variation of the banner.

        Returns: HashRef

    rate_limit_status
    rate_limit_status(resources)

        Parameters: resources
        Required: *none*

        Returns the remaining number of API requests available to the
        authenticated user before the API limit is reached for the current
        hour.

        Use "->rate_limit_status({ authenticate => 0 })" to force an
        unauthenticated call, which will return the status for the IP
        address rather than the authenticated user. (Note: for a web
        application, this is the server's IP address.)

        Returns: RateLimitStatus

    remove_profile_banner

        Parameters: *none*
        Required: *none*

        Removes the uploaded profile banner for the authenticating user.

        Returns: Nothing

    report_spam
    report_spam(id)

        Parameters: user_id, screen_name
        Required: id

        The user specified in the id is blocked by the authenticated user
        and reported as a spammer.

        Returns: User

    retweet
    retweet(id)

        Parameters: idtrim_user
        Required: id

        Retweets a tweet.

        Returns: Status

    retweets
    retweets(id)

        Parameters: id, count, trim_user
        Required: id

        Returns up to 100 of the first retweets of a given tweet.

        Returns: Arrayref[Status]

    retweets_of_me
    alias: retweeted_of_me

        Parameters: since_id, max_id, count, trim_user, include_entities,
        include_user_entities
        Required: *none*

        Returns the 20 most recent tweets of the authenticated user that
        have been retweeted by others.

        Returns: ArrayRef[Status]

    reverse_geocode
    reverse_geocode(lat, long)

        Parameters: lat, long, accuracy, granularity, max_results, callback
        Required: lat, long

        Search for places (cities and neighborhoods) that can be attached to
        a statuses/update. Given a latitude and a longitude, return a list
        of all the valid places that can be used as a place_id when updating
        a status. Conceptually, a query can be made from the user's
        location, retrieve a list of places, have the user validate the
        location he or she is at, and then send the ID of this location up
        with a call to statuses/update.

        There are multiple granularities of places that can be returned --
        "neighborhoods", "cities", etc. At this time, only United States
        data is available through this method.

        lat Required. The latitude to query about. Valid ranges are -90.0 to
            +90.0 (North is positive) inclusive.

        long
            Required. The longitude to query about. Valid ranges are -180.0
            to +180.0 (East is positive) inclusive.

        accuracy
            Optional. A hint on the "region" in which to search. If a
            number, then this is a radius in meters, but it can also take a
            string that is suffixed with ft to specify feet. If this is not
            passed in, then it is assumed to be 0m. If coming from a device,
            in practice, this value is whatever accuracy the device has
            measuring its location (whether it be coming from a GPS, WiFi
            triangulation, etc.).

        granularity
            Optional. The minimal granularity of data to return. If this is
            not passed in, then "neighborhood" is assumed. "city" can also
            be passed.

        max_results
            Optional. A hint as to the number of results to return. This
            does not guarantee that the number of results returned will
            equal max_results, but instead informs how many "nearby" results
            to return. Ideally, only pass in the number of places you intend
            to display to the user here.

        Returns: HashRef

    saved_searches

        Parameters: *none*
        Required: *none*

        Returns the authenticated user's saved search queries.

        Returns: ArrayRef[SavedSearch]

    search
    search(q)

        Parameters: q, count, callback, lang, locale, rpp, since_id, max_id,
        until, geocode, result_type, include_entities
        Required: q

        Returns a HASH reference with some meta-data about the query
        including the "next_page", "refresh_url", and "max_id". The statuses
        are returned in "results". To iterate over the results, use
        something similar to:

            my $r = $nt->search($searh_term);
            for my $status ( @{$r->{statuses}} ) {
                print "$status->{text}\n";
            }

        Returns: HashRef

    sent_direct_messages
    alias: direct_messages_sent

        Parameters: since_id, max_id, page, count, include_entities
        Required: *none*

        Returns a list of the 20 most recent direct messages sent by the
        authenticating user including detailed information about the sending
        and recipient users.

        Important: this method requires an access token with RWD (read,
        write, and direct message) permissions.

        Returns: ArrayRef[DirectMessage]

    show_direct_message
    show_direct_message(id)

        Parameters: id
        Required: id

        Returns a single direct message, specified by an id parameter. Like
        the "direct_messages" request, this method will include the user
        objects of the sender and recipient. Requires authentication.

        Important: this method requires an access token with RWD (read,
        write, and direct message) permissions.

        Returns: HashRef

    show_friendship
    alias: show_relationship

        Parameters: source_id, source_screen_name, target_id,
        target_screen_name
        Required: *none*

        Returns detailed information about the relationship between two
        users.

        Returns: Relationship

    show_list_member
    alias: is_list_member

        Parameters: owner_screen_name, owner_id, list_id, slug, user_id,
        screen_name, include_entities, skip_status
        Required: *none*

        Check if the specified user is a member of the specified list.
        Returns the user or undef.

        Returns: Maybe[User]

    show_list_subscriber
    alias: is_list_subscriber
    alias: is_subscriber_lists

        Parameters: owner_screen_name, owner_id, list_id, slug, user_id,
        screen_name, include_entities, skip_status
        Required: *none*

        Returns the user if they are a subscriber.

        Returns: User

    show_saved_search
    show_saved_search(id)

        Parameters: id
        Required: id

        Retrieve the data for a saved search, by "id", owned by the
        authenticating user.

        Returns: SavedSearch

    show_status
    show_status(id)

        Parameters: id, trim_user, include_entities, include_my_retweet
        Required: id

        Returns a single status, specified by the id parameter. The status's
        author will be returned inline.

        Returns: Status

    show_user

        Parameters: user_id, screen_name, include_entities
        Required: *none*

        Returns extended information of a given user, specified by ID or
        screen name as per the required id parameter. This information
        includes design settings, so third party developers can theme their
        widgets according to a given user's preferences. You must be
        properly authenticated to request the page of a protected user.

        Returns: ExtendedUser

    similar_places
    similar_places(lat, long, name)

        Parameters: lat, long, name, contained_within,
        attribute:street_address, callback
        Required: lat, long, name

        Locates places near the given coordinates which are similar in name.

        Conceptually you would use this method to get a list of known places
        to choose from first. Then, if the desired place doesn't exist, make
        a request to "add_place" to create a new one.

        The token contained in the response is the token needed to be able
        to create a new place.

        Returns: HashRef

    subscribe_list

        Parameters: owner_screen_name, owner_id, list_id, slug
        Required: *none*

        Subscribes the authenticated user to the specified list.

        Returns: List

    subscriptions

        Parameters: user_id, screen_name, count, cursor
        Required: *none*

        Obtain a collection of the lists the specified user is subscribed
        to, 20 lists per page by default. Does not include the user's own
        lists.

        Returns: ArrayRef[List]

    suggestion_categories

        Parameters: *none*
        Required: *none*

        Returns the list of suggested user categories. The category slug can
        be used in the "user_suggestions" API method get the users in that
        category . Does not require authentication.

        Returns: ArrayRef

    trends_available

        Parameters: *none*
        Required: *none*

        Returns the locations with trending topic information. The response
        is an array of "locations" that encode the location's WOEID (a
        Yahoo! Where On Earth ID
        <http://developer.yahoo.com/geo/geoplanet/>) and some other
        human-readable information such as a the location's canonical name
        and country.

        For backwards compatibility, this method accepts optional "lat" and
        "long" parameters. You should call "trends_closest" directly,
        instead.

        Use the WOEID returned in the location object to query trends for a
        specific location.

        Returns: ArrayRef[Location]

    trends_closest

        Parameters: lat, long
        Required: *none*

        Returns the locations with trending topic information. The response
        is an array of "locations" that encode the location's WOEID (a
        Yahoo! Where On Earth ID
        <http://developer.yahoo.com/geo/geoplanet/>) and some other
        human-readable information such as a the location's canonical name
        and country. The results are sorted by distance from that location,
        nearest to farthest.

        Use the WOEID returned in the location object to query trends for a
        specific location.

        Returns: ArrayRef[Location]

    trends_place
    trends_place(id)
    alias: trends_location

        Parameters: id, exclude
        Required: id

        Returns the top 10 trending topics for a specific WOEID. The
        response is an array of "trend" objects that encode the name of the
        trending topic, the query parameter that can be used to search for
        the topic on Search, and the direct URL that can be issued against
        Search. This information is cached for five minutes, and therefore
        users are discouraged from querying these endpoints faster than once
        every five minutes. Global trends information is also available from
        this API by using a WOEID of 1.

        Returns: ArrayRef[Trend]

    unsubscribe_list

        Parameters: list_id, slug, owner_screen_name, owner_id
        Required: *none*

        Unsubscribes the authenticated user from the specified list.

        Returns: List

    update
    update(status)

        Parameters: status, lat, long, place_id, display_coordinates,
        in_reply_to_status_id, trim_user
        Required: status

        Updates the authenticating user's status. Requires the status
        parameter specified. A status update with text identical to the
        authenticating user's current status will be ignored.

        status
            Required. The text of your status update. URL encode as
            necessary. Statuses over 140 characters will cause a 403 error
            to be returned from the API.

        in_reply_to_status_id
            Optional. The ID of an existing status that the update is in
            reply to. o Note: This parameter will be ignored unless the
            author of the tweet this parameter references is mentioned
            within the status text. Therefore, you must include @username,
            where username is the author of the referenced tweet, within the
            update.

        lat Optional. The location's latitude that this tweet refers to. The
            valid ranges for latitude is -90.0 to +90.0 (North is positive)
            inclusive. This parameter will be ignored if outside that range,
            if it is not a number, if geo_enabled is disabled, or if there
            not a corresponding long parameter with this tweet.

        long
            Optional. The location's longitude that this tweet refers to.
            The valid ranges for longitude is -180.0 to +180.0 (East is
            positive) inclusive. This parameter will be ignored if outside
            that range, if it is not a number, if geo_enabled is disabled,
            or if there not a corresponding lat parameter with this tweet.

        place_id
            Optional. The place to attach to this status update. Valid
            place_ids can be found by querying "reverse_geocode".

        display_coordinates
            Optional. By default, geo-tweets will have their coordinates
            exposed in the status object (to remain backwards compatible
            with existing API applications). To turn off the display of the
            precise latitude and longitude (but keep the contextual location
            information), pass "display_coordinates =" 0> on the status
            update.

        Returns: Status

    update_account_settings

        Parameters: trend_location_woid, sleep_time_enabled,
        start_sleep_time, end_sleep_time, time_zone, lang
        Required: *none*

        Updates the authenticating user's settings.

        Returns: HashRef

    update_delivery_device
    update_delivery_device(device)

        Parameters: device, include_entities
        Required: device

        Sets which device Twitter delivers updates to for the authenticating
        user. Sending none as the device parameter will disable SMS updates.

        Returns: BasicUser

    update_friendship

        Parameters: user_id, screen_name, device, retweets
        Required: *none*

        Allows you enable or disable retweets and device notifications from
        the specified user. All other values are assumed to be false.
        Requires authentication.

        Returns: HashRef

    update_list

        Parameters: list_id, slug, name, mode, description,
        owner_screen_name, owner_id
        Required: *none*

        Updates the specified list. The authenticated user must own the list
        to be able to update it.

        Returns: List

    update_profile

        Parameters: name, url, location, description, include_entities,
        skip_status
        Required: *none*

        Sets values that users are able to set under the "Account" tab of
        their settings page. Only the parameters specified will be updated;
        to only update the "name" attribute, for example, only include that
        parameter in your request.

        Returns: ExtendedUser

    update_profile_background_image

        Parameters: image, tile, include_entities, skip_status, use
        Required: *none*

        Updates the authenticating user's profile background image. The
        "image" parameter must be an arrayref with the same interpretation
        as the "image" parameter in the "update_profile_image" method. See
        that method's documentation for details. The "use" parameter allows
        you to specify whether to use the uploaded profile background or
        not.

        Returns: ExtendedUser

    update_profile_banner
    update_profile_banner(banner)

        Parameters: banner, width, height, offset_left, offset_top
        Required: banner

        Uploads a profile banner on behalf of the authenticating user. The
        "image" parameter is an arrayref with the following interpretation:

          [ $file ]
          [ $file, $filename ]
          [ $file, $filename, Content_Type => $mime_type ]
          [ undef, $filename, Content_Type => $mime_type, Content => $raw_image_data ]

        The first value of the array ($file) is the name of a file to open.
        The second value ($filename) is the name given to Twitter for the
        file. If $filename is not provided, the basename portion of $file is
        used. If $mime_type is not provided, it will be provided
        automatically using LWP::MediaTypes::guess_media_type().

        $raw_image_data can be provided, rather than opening a file, by
        passing "undef" as the first array value.

        Returns: Nothing

    update_profile_colors

        Parameters: profile_background_color, profile_text_color,
        profile_link_color, profile_sidebar_fill_color,
        profile_sidebar_border_color, include_entities, skip_status
        Required: *none*

        Sets one or more hex values that control the color scheme of the
        authenticating user's profile page on twitter.com. These values are
        also returned in the /users/show API method.

        Returns: ExtendedUser

    update_profile_image
    update_profile_image(image)

        Parameters: image, include_entities, skip_status
        Required: image

        Updates the authenticating user's profile image. The "image"
        parameter is an arrayref with the following interpretation:

          [ $file ]
          [ $file, $filename ]
          [ $file, $filename, Content_Type => $mime_type ]
          [ undef, $filename, Content_Type => $mime_type, Content => $raw_image_data ]

        The first value of the array ($file) is the name of a file to open.
        The second value ($filename) is the name given to Twitter for the
        file. If $filename is not provided, the basename portion of $file is
        used. If $mime_type is not provided, it will be provided
        automatically using LWP::MediaTypes::guess_media_type().

        $raw_image_data can be provided, rather than opening a file, by
        passing "undef" as the first array value.

        Returns: ExtendedUser

    update_with_media
    update_with_media(status, media[])

        Parameters: status, media[], possibly_sensitive,
        in_reply_to_status_id, lat, long, place_id, display_coordinates
        Required: status, media[]

        Updates the authenticating user's status and attaches media for
        upload.

        The "media[]" parameter is an arrayref with the following
        interpretation:

          [ $file ]
          [ $file, $filename ]
          [ $file, $filename, Content_Type => $mime_type ]
          [ undef, $filename, Content_Type => $mime_type, Content => $raw_image_data ]

        The first value of the array ($file) is the name of a file to open.
        The second value ($filename) is the name given to Twitter for the
        file. If $filename is not provided, the basename portion of $file is
        used. If $mime_type is not provided, it will be provided
        automatically using LWP::MediaTypes::guess_media_type().

        $raw_image_data can be provided, rather than opening a file, by
        passing "undef" as the first array value.

        The Tweet text will be rewritten to include the media URL(s), which
        will reduce the number of characters allowed in the Tweet text. If
        the URL(s) cannot be appended without text truncation, the tweet
        will be rejected and this method will return an HTTP 403 error.

        Returns: Status

    user_suggestions
    user_suggestions(category)
    alias: follow_suggestions

        Parameters: category, lang
        Required: category

        Access the users in a given category of the Twitter suggested user
        list and return their most recent status if they are not a protected
        user. Currently supported values for optional parameter "lang" are
        "en", "fr", "de", "es", "it". Does not require authentication.

        Returns: ArrayRef

    user_suggestions_for
    user_suggestions_for(category)
    alias: follow_suggestions

        Parameters: category, lang
        Required: category

        Access the users in a given category of the Twitter suggested user
        list.

        Returns: ArrayRef

    user_timeline

        Parameters: user_id, screen_name, since_id, max_id, count,
        trim_user, exclude_replies, include_rts, contributor_details
        Required: *none*

        Returns the 20 most recent statuses posted by the authenticating
        user, or the user specified by "screen_name" or "user_id".

        Returns: ArrayRef[Status]

    users_search
    users_search(q)
    alias: find_people
    alias: search_users

        Parameters: q, per_page, page, count, include_entities
        Required: q

        Run a search for users similar to Find People button on Twitter.com;
        the same results returned by people search on Twitter.com will be
        returned by using this API (about being listed in the People
        Search). It is only possible to retrieve the first 1000 matches from
        this API.

        Returns: ArrayRef[Users]

    verify_credentials

        Parameters: include_entities, skip_status
        Required: *none*

        Returns an HTTP 200 OK response code and a representation of the
        requesting user if authentication was successful; returns a 401
        status code and an error message if not. Use this method to test if
        supplied user credentials are valid.

        Returns: ExtendedUser

    update_with_media
    update_with_media(status, media)

        Parameters: status, media[], possibly_sensitive,
        in_reply_to_status_id, lat, long, place_id, display_coordinates
        Required: status, media

        Updates the authenticating user's status and attaches media for
        upload.

        The "media[]" parameter is an arrayref with the following
        interpretation:

          [ $file ]
          [ $file, $filename ]
          [ $file, $filename, Content_Type => $mime_type ]
          [ undef, $filename, Content_Type => $mime_type, Content => $raw_image_data ]

        The first value of the array ($file) is the name of a file to open.
        The second value ($filename) is the name given to Twitter for the
        file. If $filename is not provided, the basename portion of $file is
        used. If $mime_type is not provided, it will be provided
        automatically using LWP::MediaTypes::guess_media_type().

        $raw_image_data can be provided, rather than opening a file, by
        passing "undef" as the first array value.

        The Tweet text will be rewritten to include the media URL(s), which
        will reduce the number of characters allowed in the Tweet text. If
        the URL(s) cannot be appended without text truncation, the tweet
        will be rejected and this method will return an HTTP 403 error.

        Returns: Status

Search API Methods
    These methods are provided when trait "API::Search" is included in the
    "traits" option to "new".

    search
    search(q)

        Parameters: q, callback, lang, locale, rpp, page, since_id, until,
        geocode, show_user, result_type
        Required: q

        Returns a HASH reference with some meta-data about the query
        including the "next_page", "refresh_url", and "max_id". The statuses
        are returned in "results". To iterate over the results, use
        something similar to:

            my $r = $nt->search($searh_term);
            for my $status ( @{$r->{results}} ) {
                print "$status->{text}\n";
            }

        Returns: HashRef

TwitterVision API Methods
    These methods are provided when trait "API::TwitterVision" is included
    in the "traits" option to "new".

    current_status
    current_status(id)

        Parameters: id, callback
        Required: id

        Get the current location and status of a user.

        Returns: HashRef

    update_twittervision
    update_twittervision(location)

        Parameters: location
        Required: location

        Updates the location for the authenticated user.

        Returns: HashRef

ERROR HANDLING
    When a Twitter API error or a network error is encountered,
    "Net::Twitter::Lite::Error" object is thrown. You can catch and process
    these exceptions by using "eval" blocks and testing $@:

        eval {
            my $statuses = $nt->friends_timeline(); # this might die!

            for my $status ( @$statuses ) {
                #...
            }
        };
        if ( $@ ) {
            # friends_timeline encountered an error

            if ( blessed $@ && $@->isa('Net::Twitter::Lite::Error') ) {
                #... use the thrown error obj
                warn $@->error;
            }
            else {
                # something bad happened!
                die $@;
            }
        }

    "Net::Twitter::Lite::Error" stringifies to something reasonable, so if
    you don't need detailed error information, you can simply treat $@ as a
    string:

        eval { $nt->update($status) };
        if ( $@ ) {
            warn "update failed because: $@\n";
        }

SEE ALSO
    Net::Twitter::Lite::Error
        The "Net::Twitter::Lite" exception object.

    <http://dev.twitter.com/doc>
        This is the official Twitter API documentation. It describes the
        methods and their parameters in more detail and may be more current
        than the documentation provided with this module.

    LWP::UserAgent::POE
        This LWP::UserAgent compatible class can be used in POE based
        application along with Net::Twitter::Lite to provide concurrent,
        non-blocking requests.

    Catalyst::Authentication::Credential::Twitter
        This module, by Jesse Stay, provides Twitter OAuth authentication
        support for the popular Catalyst web application framework.

SUPPORT
    Please report bugs to "bug-net-twitter@rt.cpan.org", or through the web
    interface at <https://rt.cpan.org/Dist/Display.html?Queue=Net-Twitter>.

    Join the #net-twitter IRC channel on irc.perl.org.

    Follow perl_api: <http://twitter.com/perl_api>.

    Track development at <http://github.com/semifor/net-twitter-lite>.

AUTHOR
    Marc Mims <marc@questright.com> (@semifor on Twitter)

LICENSE
    Copyright (c) 2013 Marc Mims

    This library is free software; you can redistribute it and/or modify it
    under the same terms as Perl itself.

